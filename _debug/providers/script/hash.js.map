{"version":3,"file":"hash.js","sourceRoot":"","sources":["providers/script/hash.ts"],"names":["hash","ScriptHasher","ScriptHasher.constructor","ScriptHasher.abort","ScriptHasher.close","ScriptHasher.write","getHash"],"mappings":"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","sourcesContent":["import * as crypto from 'crypto';\nimport Promise, { State } from 'dojo-core/Promise';\nimport { ByteBuffer, Codec, utf8 } from 'dojo-core/encoding';\nimport { Data, Hasher, HashFunction } from '../../crypto';\nimport { sha224, sha256 } from './sha32';\nimport { sha384, sha512 } from './sha64';\nimport { ScriptHash } from './base';\nimport sha1 from './sha1';\nimport md5 from './md5';\n\n/**\n * A mapping of crypto algorithm names to implementations\n */\nexport const ALGORITHMS: { [key: string]: ScriptHash } = {\n\tmd5: md5,\n\tsha1: sha1,\n\tsha224: sha224,\n\tsha256: sha256,\n\tsha384: sha384,\n\tsha512: sha512\n};\n\n/**\n * Hashes a chunk of data.\n */\nfunction hash(algorithm: string, data: Data, codec: Codec): Promise<ByteBuffer> {\n\tif (typeof data === 'string') {\n\t\tdata = codec.encode(<string> data);\n\t}\n\treturn Promise.resolve(ALGORITHMS[algorithm](<ByteBuffer> data));\n}\n\n// Cache a resolved Promise to return from the stream methods.\nconst resolvedPromise = Promise.resolve();\n\n/**\n * An object that can be used to hash a stream of data.\n */\nclass ScriptHasher<T extends Data> implements Hasher<T> {\n\tconstructor(algorithm: string, codec: Codec) {\n\t\tObject.defineProperty(this, '_hash', {\n\t\t\tconfigurable: true,\n\t\t\tvalue: ALGORITHMS[algorithm]\n\t\t});\n\t\tObject.defineProperty(this, '_codec', { value: codec });\n\t\tObject.defineProperty(this, '_buffer', {\n\t\t\twritable: true,\n\t\t\tvalue: []\n\t\t});\n\t\tObject.defineProperty(this, 'digest', {\n\t\t\tenumerable: true,\n\t\t\tvalue: new Promise((resolve, reject) => {\n\t\t\t\tObject.defineProperty(this, '_resolve', { value: resolve });\n\t\t\t\tObject.defineProperty(this, '_reject', { value: reject });\n\t\t\t})\n\t\t});\n\t}\n\n\tprivate _buffer: number[];\n\tprivate _codec: Codec;\n\tprivate _hash: (data: ByteBuffer) => ByteBuffer;\n\tprivate _reject: (reason: Error) => void;\n\tprivate _resolve: (value: any) => void;\n\n\tdigest: Promise<ByteBuffer>;\n\n\tabort(reason?: Error): Promise<any> {\n\t\tif (this.digest.state !== State.Pending) {\n\t\t\treturn this.digest;\n\t\t}\n\n\t\t// Release the reference to the internal buffer and reject the digest\n\t\tthis._buffer = undefined;\n\t\tthis._reject(reason);\n\t\treturn resolvedPromise;\n\t}\n\n\tclose(): Promise<any> {\n\t\tif (this.digest.state !== State.Pending) {\n\t\t\treturn this.digest;\n\t\t}\n\n\t\tthis._resolve(this._hash(this._buffer));\n\t\t// Release the reference to the buffer\n\t\tthis._buffer = undefined;\n\t\treturn resolvedPromise;\n\t}\n\n\twrite(chunk: T): Promise<any> {\n\t\tif (this.digest.state !== State.Pending) {\n\t\t\treturn this.digest;\n\t\t}\n\n\t\ttry {\n\t\t\tif (typeof chunk === 'string') {\n\t\t\t\tlet chunkString: string = <any> chunk;\n\t\t\t\tthis._buffer = this._buffer.concat(this._codec.encode(chunkString));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet chunkBuffer: number[] = <any> chunk;\n\t\t\t\tthis._buffer = this._buffer.concat(chunkBuffer);\n\t\t\t}\n\n\t\t\treturn resolvedPromise;\n\t\t}\n\t\tcatch (error) {\n\t\t\tthis._reject(error);\n\t\t\treturn this.digest;\n\t\t}\n\t}\n}\n\nexport default function getHash(algorithm: string): HashFunction {\n\tconst hasher = <HashFunction> function (data: Data, codec: Codec = utf8): Promise<ByteBuffer> {\n\t\treturn hash(algorithm, data, codec);\n\t};\n\thasher.create = function<T extends Data> (codec: Codec = utf8): Hasher<T> {\n\t\treturn new ScriptHasher<T>(algorithm, codec);\n\t};\n\thasher.algorithm = algorithm;\n\n\treturn hasher;\n}\n"]}