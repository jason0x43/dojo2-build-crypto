{"version":3,"file":"sha1.js","sourceRoot":"","sources":["providers/script/sha1.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * A port of Paul Johnstone's SHA1 implementation\n *\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n *\n * Dojo port by Tom Trenka\n */\n\nimport { ByteBuffer } from 'dojo-core/encoding';\nimport { MathFunction, ScriptHash, addWords, bytesToWords, wordsToBytes } from './base';\n\nconst S: MathFunction = function (n, c) {\n\treturn (n << c) | (n >>> (32 - c));\n}\nconst FT: MathFunction = function (t, b, c, d) {\n\tif (t < 20) {\n\t\treturn (b & c) | (~b & d);\n\t}\n\tif (t < 40) {\n\t\treturn b ^ c ^ d;\n\t}\n\tif (t < 60) {\n\t\treturn (b & c) | (b & d) | (c & d);\n\t}\n\treturn b ^ c ^ d;\n}\nconst KT: MathFunction = function (t) {\n\treturn (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514;\n}\n\nconst sha1 = <ScriptHash> function (bytes: ByteBuffer): ByteBuffer {\n\tconst numBits = bytes.length * 8;\n\tconst words = bytesToWords(bytes);\n\n\t// Pad the input\n\twords[numBits >> 5] |= 0x80 << (24 - numBits % 32);\n\twords[((numBits + 64 >> 9) << 4) + 15] = numBits;\n\n\tconst w = new Array(80);\n\n\t// Initialize state\n\tlet a = 0x67452301;\n\tlet b = 0xEFCDAB89;\n\tlet c = 0x98BADCFE;\n\tlet d = 0x10325476;\n\tlet e = 0xC3D2E1F0;\n\n\tconst numWords = words.length;\n\tfor (let i = 0; i < numWords; i += 16) {\n\t\tconst olda = a;\n\t\tconst oldb = b;\n\t\tconst oldc = c;\n\t\tconst oldd = d;\n\t\tconst olde = e;\n\n\t\tfor (let t = 0; t < 80; t++) {\n\t\t\tif (t < 16) {\n\t\t\t\tw[t] = words[i + t];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw[t] = S(w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16], 1);\n\t\t\t}\n\n\t\t\tconst temp = addWords(S(a, 5), FT(t, b, c, d), e, w[t], KT(t));\n\t\t\te = d; \n\t\t\td = c;\n\t\t\tc = S(b, 30);\n\t\t\tb = a;\n\t\t\ta = temp;\n\t\t}\n\n\t\ta = addWords(a, olda);\n\t\tb = addWords(b, oldb);\n\t\tc = addWords(c, oldc);\n\t\td = addWords(d, oldd);\n\t\te = addWords(e, olde);\n\t}\n\n\treturn wordsToBytes([ a, b, c, d, e ]);\n}\nsha1.blockSize = 512;\n\nexport default sha1;\n"]}