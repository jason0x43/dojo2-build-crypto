{"version":3,"file":"hmac.js","sourceRoot":"","sources":["providers/script/hmac.ts"],"names":["hmac"],"mappings":";;;;;;;;IAIA,cAA6B,IAAgB,EAAE,IAAgB,EAAE,GAAe;QAE/EA,AADAA,kBAAkBA;QAClBA,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,GAAGA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,CAACA,CAACA,CAACA;YAC9BA,GAAGA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA;QACjBA,CAACA;QAGDA,AADAA,kBAAkBA;YACZA,QAAQA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,GAAGA,EAAEA,CAACA,GAAGA,CAACA,CAACA;QACpDA,IAAMA,IAAIA,GAAGA,IAAIA,KAAKA,CAACA,QAAQA,CAACA,CAACA;QACjCA,IAAMA,IAAIA,GAAGA,IAAIA,KAAKA,CAACA,QAAQA,CAACA,CAACA;QACjCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;YACnCA,IAAIA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA;YACxBA,IAAIA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA;QACzBA,CAACA;QAGDA,AADAA,wBAAwBA;YAClBA,EAAEA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA;QACnCA,IAAMA,EAAEA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,EAAEA,CAACA,CAACA,CAACA;QAEjCA,MAAMA,CAACA,EAAEA,CAACA;IACXA,CAACA;IApBD,sBAoBC,CAAA;IAAA,CAAC","sourcesContent":["import { ByteBuffer, utf8 } from 'dojo-core/encoding';\nimport { Endian, ScriptHash, bytesToWords } from './base';\nimport { Key } from '../../crypto';\n\nexport default function hmac(hash: ScriptHash, data: ByteBuffer, key: ByteBuffer): ByteBuffer {\n\t// Prepare the key\n\tif (key.length > 4 * 16 * 32) {\n\t\tkey = hash(key);\n\t}\n\n\t// Set up the pads\n\tconst numBytes = Math.ceil(hash.blockSize / 32) * 4;\n\tconst ipad = new Array(numBytes);\n\tconst opad = new Array(numBytes);\n\tfor (let i = 0; i < numBytes; i++) {\n\t\tipad[i] = key[i] ^ 0x36;\n\t\topad[i] = key[i] ^ 0x5c;\n\t}\n\n\t// Make the final digest\n\tconst r1 = hash(ipad.concat(data));\n\tconst r2 = hash(opad.concat(r1));\n\n\treturn r2;\n};\n"]}