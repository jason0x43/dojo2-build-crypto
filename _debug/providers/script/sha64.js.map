{"version":3,"file":"sha64.js","sourceRoot":"","sources":["providers/script/sha64.ts"],"names":["int64","copy","rotateRight","reverseRotateRight","shiftRight","add","add4","add5","sha64"],"mappings":";;;;;;;;IAEA,qBAAuD,QAAQ,CAAC,CAAA;IAWhE,AAHA;;OAEG;mBACY,IAAY,EAAE,GAAW;QACvCA,MAAMA,CAACA,CAAEA,GAAGA,EAAEA,IAAIA,CAAEA,CAACA;IACtBA,CAACA;IAKD,AAHA;;OAEG;kBACW,GAAU,EAAE,GAAU;QACnCC,GAAGA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,CAACA;QAChBA,GAAGA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,CAACA;IACjBA,CAACA;IAKD,AAHA;;OAEG;yBACkB,GAAU,EAAE,GAAU,EAAE,KAAa;QACzDC,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,CAACA;QACvDA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,CAACA;IACxDA,CAACA;IAKD,AAHA;;OAEG;gCACyB,GAAU,EAAE,GAAU,EAAE,KAAa;QAChEC,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,CAACA;QACvDA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,CAACA;IACxDA,CAACA;IAKD,AAHA;;OAEG;wBACiB,GAAU,EAAE,GAAU,EAAE,KAAa;QACxDC,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,CAACA;QACvDA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,KAAKA,CAACA,CAACA;IAC7BA,CAACA;IAKD,AAHA;;OAEG;iBACU,GAAU,EAAE,CAAQ,EAAE,CAAQ;QAC1CC,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,CAACA;QAC7CA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACvDA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QAC3DA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACvDA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;QACpCA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;IACrCA,CAACA;IAKD,AAHA;;OAEG;kBACW,GAAU,EAAE,CAAQ,EAAE,CAAQ,EAAE,CAAQ,EAAE,CAAQ;QAC/DC,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,CAACA;QACjFA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACvFA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QAC/FA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACvFA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;QACpCA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;IACrCA,CAACA;IAKD,AAHA;;OAEG;kBACW,GAAU,EAAE,CAAQ,EAAE,CAAQ,EAAE,CAAQ,EAAE,CAAQ,EAAE,CAAQ;QACzEC,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,CAACA;QACnGA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACvGA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACjHA,IAAMA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,CAACA,CAACA;QACvGA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;QACpCA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;IACrCA,CAACA;IAGD,AADA,mBAAmB;QACb,CAAC,GAAG;QACT,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5D,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;KAC5D,CAAC;IAQF,AANA;;;;;OAKG;mBACY,KAAiB,EAAE,KAAe;QAChDC,IAAIA,OAAOA,GAAGA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA;QAC/BA,IAAMA,KAAKA,GAAGA,mBAAYA,CAACA,KAAKA,CAACA,CAACA;QAGlCA,AADAA,sBAAsBA;YAChBA,IAAIA,GAAYA,EAAEA,CAACA;QACzBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,OAAKA,GAAGA,KAAKA,CAACA,MAAMA,EAAEA,CAACA,GAAGA,OAAKA,EAAEA,CAACA,IAAIA,CAACA,EAAEA,CAACA;YACzDA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA,CAACA,EAAEA,KAAKA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;QAC1CA,CAACA;QAGDA,AADAA,6BAA6BA;YACvBA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACtBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,GAAGA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACxBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACvBA,IAAMA,EAAEA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QAEvBA,IAAMA,CAACA,GAAGA,IAAIA,KAAKA,CAACA,EAAEA,CAACA,CAACA;QACxBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;YAC7BA,CAACA,CAACA,CAACA,CAACA,GAAGA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACpBA,CAACA;QAGDA,AADAA,gBAAgBA;QAChBA,KAAKA,CAACA,OAAOA,IAAIA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,EAAEA,GAAGA,OAAOA,GAAGA,EAAEA,CAACA,CAACA;QACnDA,KAAKA,CAACA,CAACA,CAACA,OAAOA,GAAGA,GAAGA,IAAIA,EAAEA,CAACA,IAAIA,CAACA,CAACA,GAAGA,EAAEA,CAACA,GAAGA,OAAOA,CAACA;QAEnDA,IAAIA,QAAQA,GAAGA,KAAKA,CAACA,MAAMA,CAACA;QAC5BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,EAAEA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;YACvCA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjBA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAEjBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC7BA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,KAAKA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBAC3BA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,KAAKA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA;YAChCA,CAACA;YAEDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAE9BA,AADAA,SAASA;gBACTA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBAC9BA,kBAAkBA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBACrCA,UAAUA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC5BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAG9BA,AADAA,SAASA;gBACTA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC9BA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC9BA,UAAUA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAE9BA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA;YACzCA,CAACA;YAEDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAE7BA,AADAA,KAAKA;gBACLA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACvCA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAGvCA,AADAA,SAASA;gBACTA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBACvBA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBACvBA,kBAAkBA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAG9BA,AADAA,SAASA;gBACTA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBACvBA,kBAAkBA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7BA,kBAAkBA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAG9BA,AADAA,KAAKA;gBACLA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACvDA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAEvDA,IAAIA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAChCA,GAAGA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA,GAAGA,CAACA,CAACA;gBAEjBA,IAAIA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACXA,IAAIA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACXA,IAAIA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACXA,GAAGA,CAACA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBACdA,IAAIA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACXA,IAAIA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACXA,IAAIA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACXA,GAAGA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA,CAACA,CAACA;YAChBA,CAACA;YAEDA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACzBA,GAAGA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QAC1BA,CAACA;QAGDA,AADAA,8CAA8CA;YAC1CA,GAAGA,GAAaA,EAAEA,CAACA;QACvBA,IAAMA,KAAKA,GAAGA,IAAIA,CAACA,MAAMA,CAACA;QAC1BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,KAAKA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;YAChCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;YACxBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;QAC7BA,CAACA;QAEDA,MAAMA,CAACA,mBAAYA,CAACA,GAAGA,CAACA,CAACA;IAC1BA,CAACA;IAAA,CAAC;IAEF,IAAM,QAAQ,GAAG;QAChB,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;KAC9F,CAAC;IACF,IAAM,MAAM,GAAgB,UAAU,IAAgB;QACrD,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;IACxC,CAAC;IAEQ,cAAM,UAFb;IACF,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;IAGxB,IAAM,QAAQ,GAAa;QAC1B,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;KAC9F,CAAC;IACF,IAAM,MAAM,GAAgB,UAAU,IAAgB;QACrD,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAEQ,cAAM,UAFd;IACD,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;IACN","sourcesContent":["import { ByteBuffer, utf8 } from 'dojo-core/encoding';\nimport Promise from 'dojo-core/Promise';\nimport { ScriptHash, bytesToWords, wordsToBytes } from './base';\nimport { Data } from '../../crypto';\n\n/**\n * A 64-bit integer as [ low byte, high byte ]\n */\ntype Int64 = number[];\n\n/**\n * Create a 64-bit integer from two 32-bit values\n */\nfunction int64(high: number, low: number): Int64 {\n\treturn [ low, high ];\n}\n\n/**\n * Copies a value.\n */\nfunction copy(dst: Int64, src: Int64): void {\n\tdst[0] = src[0];\n\tdst[1] = src[1];\n}\n\n/**\n * Right-rotates a value.\n */\nfunction rotateRight(dst: Int64, src: Int64, shift: number) {\n\tdst[0] = (src[0] >>> shift) | (src[1] << (32 - shift));\n\tdst[1] = (src[1] >>> shift) | (src[0] << (32 - shift));\n}\n\n/**\n * Reverses the dwords of the source and then rotates right by shift.\n */\nfunction reverseRotateRight(dst: Int64, src: Int64, shift: number) {\n\tdst[0] = (src[1] >>> shift) | (src[0] << (32 - shift));\n\tdst[1] = (src[0] >>> shift) | (src[1] << (32 - shift));\n}\n\n/**\n * Bitwise-shifts right a 64-bit number by shift.\n */\nfunction shiftRight(dst: Int64, src: Int64, shift: number) {\n\tdst[0] = (src[0] >>> shift) | (src[1] << (32 - shift));\n\tdst[1] = (src[1] >>> shift);\n}\n\n/**\n * Adds two 64-bit numbers\n */\nfunction add(dst: Int64, x: Int64, y: Int64) {\n\tconst w0 = (x[0] & 0xFFFF) + (y[0] & 0xFFFF);\n\tconst w1 = (x[0] >>> 16) + (y[0] >>> 16) + (w0 >>> 16);\n\tconst w2 = (x[1] & 0xFFFF) + (y[1] & 0xFFFF) + (w1 >>> 16);\n\tconst w3 = (x[1] >>> 16) + (y[1] >>> 16) + (w2 >>> 16);\n\tdst[0] = (w0 & 0xFFFF) | (w1 << 16);\n\tdst[1] = (w2 & 0xFFFF) | (w3 << 16);\n}\n\n/**\n * Adds four 64-bit numbers\n */\nfunction add4(dst: Int64, a: Int64, b: Int64, c: Int64, d: Int64){\n\tconst w0 = (a[0] & 0xFFFF) + (b[0] & 0xFFFF) + (c[0] & 0xFFFF) + (d[0] & 0xFFFF);\n\tconst w1 = (a[0] >>> 16) + (b[0] >>> 16) + (c[0] >>> 16) + (d[0] >>> 16) + (w0 >>> 16);\n\tconst w2 = (a[1] & 0xFFFF) + (b[1] & 0xFFFF) + (c[1] & 0xFFFF) + (d[1] & 0xFFFF) + (w1 >>> 16);\n\tconst w3 = (a[1] >>> 16) + (b[1] >>> 16) + (c[1] >>> 16) + (d[1] >>> 16) + (w2 >>> 16);\n\tdst[0] = (w0 & 0xFFFF) | (w1 << 16);\n\tdst[1] = (w2 & 0xFFFF) | (w3 << 16);\n}\n\n/**\n * Adds five 64-bit numbers\n */\nfunction add5(dst: Int64, a: Int64, b: Int64, c: Int64, d: Int64, e: Int64) {\n\tconst w0 = (a[0] & 0xFFFF) + (b[0] & 0xFFFF) + (c[0] & 0xFFFF) + (d[0] & 0xFFFF) + (e[0] & 0xFFFF);\n\tconst w1 = (a[0] >>> 16) + (b[0] >>> 16) + (c[0] >>> 16) + (d[0] >>> 16) + (e[0] >>> 16) + (w0 >>> 16);\n\tconst w2 = (a[1] & 0xFFFF) + (b[1] & 0xFFFF) + (c[1] & 0xFFFF) + (d[1] & 0xFFFF) + (e[1] & 0xFFFF) + (w1 >>> 16);\n\tconst w3 = (a[1] >>> 16) + (b[1] >>> 16) + (c[1] >>> 16) + (d[1] >>> 16) + (e[1] >>> 16) + (w2 >>> 16);\n\tdst[0] = (w0 & 0xFFFF) | (w1 << 16);\n\tdst[1] = (w2 & 0xFFFF) | (w3 << 16);\n}\n\n// constant K array\nconst K = [\n\tint64(0x428A2F98, 0xD728AE22), int64(0x71374491, 0x23EF65CD),\n\tint64(0xB5C0FBCF, 0xEC4D3B2F), int64(0xE9B5DBA5, 0x8189DBBC), \n\tint64(0x3956C25B, 0xF348B538), int64(0x59F111F1, 0xB605D019),\n\tint64(0x923F82A4, 0xAF194F9B), int64(0xAB1C5ED5, 0xDA6D8118), \n\tint64(0xD807AA98, 0xA3030242), int64(0x12835B01, 0x45706FBE),\n\tint64(0x243185BE, 0x4EE4B28C), int64(0x550C7DC3, 0xD5FFB4E2), \n\tint64(0x72BE5D74, 0xF27B896F), int64(0x80DEB1FE, 0x3B1696B1),\n\tint64(0x9BDC06A7, 0x25C71235), int64(0xC19BF174, 0xCF692694), \n\tint64(0xE49B69C1, 0x9EF14AD2), int64(0xEFBE4786, 0x384F25E3),\n\tint64(0x0FC19DC6, 0x8B8CD5B5), int64(0x240CA1CC, 0x77AC9C65), \n\tint64(0x2DE92C6F, 0x592B0275), int64(0x4A7484AA, 0x6EA6E483),\n\tint64(0x5CB0A9DC, 0xBD41FBD4), int64(0x76F988DA, 0x831153B5), \n\tint64(0x983E5152, 0xEE66DFAB), int64(0xA831C66D, 0x2DB43210),\n\tint64(0xB00327C8, 0x98FB213F), int64(0xBF597FC7, 0xBEEF0EE4), \n\tint64(0xC6E00BF3, 0x3DA88FC2), int64(0xD5A79147, 0x930AA725),\n\tint64(0x06CA6351, 0xE003826F), int64(0x14292967, 0x0A0E6E70), \n\tint64(0x27B70A85, 0x46D22FFC), int64(0x2E1B2138, 0x5C26C926),\n\tint64(0x4D2C6DFC, 0x5AC42AED), int64(0x53380D13, 0x9D95B3DF), \n\tint64(0x650A7354, 0x8BAF63DE), int64(0x766A0ABB, 0x3C77B2A8),\n\tint64(0x81C2C92E, 0x47EDAEE6), int64(0x92722C85, 0x1482353B), \n\tint64(0xA2BFE8A1, 0x4CF10364), int64(0xA81A664B, 0xBC423001),\n\tint64(0xC24B8B70, 0xD0F89791), int64(0xC76C51A3, 0x0654BE30), \n\tint64(0xD192E819, 0xD6EF5218), int64(0xD6990624, 0x5565A910),\n\tint64(0xF40E3585, 0x5771202A), int64(0x106AA070, 0x32BBD1B8), \n\tint64(0x19A4C116, 0xB8D2D0C8), int64(0x1E376C08, 0x5141AB53),\n\tint64(0x2748774C, 0xDF8EEB99), int64(0x34B0BCB5, 0xE19B48A8), \n\tint64(0x391C0CB3, 0xC5C95A63), int64(0x4ED8AA4A, 0xE3418ACB),\n\tint64(0x5B9CCA4F, 0x7763E373), int64(0x682E6FF3, 0xD6B2B8A3), \n\tint64(0x748F82EE, 0x5DEFB2FC), int64(0x78A5636F, 0x43172F60),\n\tint64(0x84C87814, 0xA1F0AB72), int64(0x8CC70208, 0x1A6439EC), \n\tint64(0x90BEFFFA, 0x23631E28), int64(0xA4506CEB, 0xDE82BDE9),\n\tint64(0xBEF9A3F7, 0xB2C67915), int64(0xC67178F2, 0xE372532B), \n\tint64(0xCA273ECE, 0xEA26619C), int64(0xD186B8C7, 0x21C0C207),\n\tint64(0xEADA7DD6, 0xCDE0EB1E), int64(0xF57D4F7F, 0xEE6ED178), \n\tint64(0x06F067AA, 0x72176FBA), int64(0x0A637DC5, 0xA2C898A6),\n\tint64(0x113F9804, 0xBEF90DAE), int64(0x1B710B35, 0x131C471B), \n\tint64(0x28DB77F5, 0x23047D84), int64(0x32CAAB7B, 0x40C72493),\n\tint64(0x3C9EBE0A, 0x15C9BEBC), int64(0x431D67C4, 0x9C100D4C), \n\tint64(0x4CC5D4BE, 0xCB3E42B6), int64(0x597F299C, 0xFC657E2A),\n\tint64(0x5FCB6FAB, 0x3AD6FAEC), int64(0x6C44198C, 0x4A475817)\n];\n\n/**\n * Calculate a hash based on 64-bit words\n *\n * @param data - The data to hash\n * @param hash - The initial hash value\n */\nfunction sha64(bytes: ByteBuffer, _hash: number[]): ByteBuffer {\n\tlet numBits = bytes.length * 8;\n\tconst words = bytesToWords(bytes);\n\n\t// Initialize the hash\n\tconst hash: Int64[] = [];\n\tfor (let i = 0, count = _hash.length; i < count; i += 2) {\n\t\thash.push(int64(_hash[i], _hash[i + 1]));\n\t}\n\n\t// Initialize state variables\n\tconst T1 = int64(0, 0);\n\tconst T2 = int64(0, 0);\n\tconst a = int64(0, 0);\n\tconst b = int64(0, 0);\n\tconst c = int64(0, 0);\n\tconst d = int64(0, 0);\n\tconst e = int64(0, 0);\n\tconst f = int64(0, 0);\n\tconst g = int64(0, 0);\n\tconst h = int64(0, 0);\n\tconst s0 = int64(0, 0);\n\tconst s1 = int64(0, 0);\n\tconst Ch = int64(0, 0);\n\tconst Maj = int64(0, 0);\n\tconst r1 = int64(0, 0);\n\tconst r2 = int64(0, 0);\n\tconst r3 = int64(0, 0);\n\n\tconst w = new Array(80);\n\tfor (let i = 0; i < 80; i++) {\n\t\tw[i] = int64(0, 0);\n\t}\n\n\t// Pad the input\n\twords[numBits >> 5] |= 0x80 << (24 - numBits % 32);\n\twords[((numBits + 128 >> 10) << 5) + 31] = numBits;\n\n\tlet numWords = words.length;\n\tfor (let i = 0; i < numWords; i += 32) {\n\t\tcopy(a, hash[0]);\n\t\tcopy(b, hash[1]);\n\t\tcopy(c, hash[2]);\n\t\tcopy(d, hash[3]);\n\t\tcopy(e, hash[4]);\n\t\tcopy(f, hash[5]);\n\t\tcopy(g, hash[6]);\n\t\tcopy(h, hash[7]);\n\n\t\tfor (let j = 0; j < 16; j++) {\n\t\t\tw[j][1] = words[i + 2 * j];\n\t\t\tw[j][0] = words[i + 2 * j + 1];\n\t\t}\n\n\t\tfor (let j = 16; j < 80; j++) {\n\t\t\t// sigma1\n\t\t\trotateRight(r1, w[j - 2], 19);\n\t\t\treverseRotateRight(r2, w[j - 2], 29);\n\t\t\tshiftRight(r3, w[j - 2], 6);\n\t\t\ts1[0] = r1[0] ^ r2[0] ^ r3[0];\n\t\t\ts1[1] = r1[1] ^ r2[1] ^ r3[1];\n\n\t\t\t// sigma0\n\t\t\trotateRight(r1, w[j - 15], 1);\n\t\t\trotateRight(r2, w[j - 15], 8);\n\t\t\tshiftRight(r3, w[j - 15], 7);\n\t\t\ts0[0] = r1[0] ^ r2[0] ^ r3[0];\n\t\t\ts0[1] = r1[1] ^ r2[1] ^ r3[1];\n\n\t\t\tadd4(w[j], s1, w[j - 7], s0, w[j - 16]);\n\t\t}\n\n\t\tfor (let j = 0; j < 80; j++) {\n\t\t\t// Ch\n\t\t\tCh[0] = (e[0] & f[0]) ^ (~e[0] & g[0]);\n\t\t\tCh[1] = (e[1] & f[1]) ^ (~e[1] & g[1]);\n\n\t\t\t// Sigma1\n\t\t\trotateRight(r1, e, 14);\n\t\t\trotateRight(r2, e, 18);\n\t\t\treverseRotateRight(r3, e, 9);\n\t\t\ts1[0] = r1[0] ^ r2[0] ^ r3[0];\n\t\t\ts1[1] = r1[1] ^ r2[1] ^ r3[1];\n\n\t\t\t// Sigma0\n\t\t\trotateRight(r1, a, 28);\n\t\t\treverseRotateRight(r2, a, 2);\n\t\t\treverseRotateRight(r3, a, 7);\n\t\t\ts0[0] = r1[0] ^ r2[0] ^ r3[0];\n\t\t\ts0[1] = r1[1] ^ r2[1] ^ r3[1];\n\n\t\t\t//Maj\n\t\t\tMaj[0] = (a[0] & b[0]) ^ (a[0] & c[0]) ^ (b[0] & c[0]);\n\t\t\tMaj[1] = (a[1] & b[1]) ^ (a[1] & c[1]) ^ (b[1] & c[1]);\n\n\t\t\tadd5(T1, h, s1, Ch, K[j], w[j]);\n\t\t\tadd(T2, s0, Maj);\n\n\t\t\tcopy(h, g);\n\t\t\tcopy(g, f);\n\t\t\tcopy(f, e);\n\t\t\tadd(e, d, T1);\n\t\t\tcopy(d, c);\n\t\t\tcopy(c, b);\n\t\t\tcopy(b, a);\n\t\t\tadd(a, T1, T2);\n\t\t}\n\n\t\tadd(hash[0], hash[0], a);\n\t\tadd(hash[1], hash[1], b);\n\t\tadd(hash[2], hash[2], c);\n\t\tadd(hash[3], hash[3], d);\n\t\tadd(hash[4], hash[4], e);\n\t\tadd(hash[5], hash[5], f);\n\t\tadd(hash[6], hash[6], g);\n\t\tadd(hash[7], hash[7], h);\n\t}\n\n\t//\tconvert the final hash back to 32-bit words\n\tlet ret: number[] = [];\n\tconst count = hash.length;\n\tfor (let i = 0; i < count; i++) {\n\t\tret[i * 2] = hash[i][1];\n\t\tret[i * 2 + 1] = hash[i][0];\n\t}\n\n\treturn wordsToBytes(ret);\n};\n\nconst HASH_384 = [\n\t0xCBBB9D5D, 0xC1059ED8, 0x629A292A, 0x367CD507, 0x9159015A, 0x3070DD17, 0x152FECD8, 0xF70E5939,\n\t0x67332667, 0xFFC00B31, 0x8EB44A87, 0x68581511, 0xDB0C2E0D, 0x64F98FA7, 0x47B5481D, 0xBEFA4FA4\n];\nconst sha384 = <ScriptHash> function (data: ByteBuffer): ByteBuffer {\n\tconst hash = sha64(data, HASH_384);\n\treturn hash.slice(0, hash.length - 16);\n};\nsha384.blockSize = 1024;\nexport { sha384 };\n\nconst HASH_512: number[] = [\n\t0x6A09E667, 0xF3BCC908, 0xBB67AE85, 0x84CAA73B, 0x3C6EF372, 0xFE94F82B, 0xA54FF53A, 0x5F1D36F1,\n\t0x510E527F, 0xADE682D1, 0x9B05688C, 0x2B3E6C1F, 0x1F83D9AB, 0xFB41BD6B, 0x5BE0CD19, 0x137E2179\n];\nconst sha512 = <ScriptHash> function (data: ByteBuffer): ByteBuffer {\n\treturn sha64(data, HASH_512);\n}\nsha512.blockSize = 1024;\nexport { sha512 };\n"]}