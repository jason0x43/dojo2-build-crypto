{"version":3,"file":"sha32.js","sourceRoot":"","sources":["providers/script/sha32.ts"],"names":["S","R","Ch","Maj","Sigma0","Sigma1","Gamma0","Gamma1","sha32"],"mappings":";;;;;;;;IAEA,qBAAiE,QAAQ,CAAC,CAAA;IAI1E,AADA,qBAAqB;eACT,CAAS,EAAE,CAAS,IAAYA,MAAMA,CAACA,CAAEA,CAACA,KAAKA,CAACA,CAAEA,GAAGA,CAACA,CAACA,IAAIA,CAACA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;IACnF,WAAY,CAAS,EAAE,CAAS,IAAYC,MAAMA,CAACA,CAAEA,CAACA,KAAKA,CAACA,CAAEA,CAACA,CAACA,CAACA;IACjE,YAAY,CAAS,EAAE,CAAS,EAAE,CAAS,IAAaC,MAAMA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;IACxF,aAAa,CAAS,EAAE,CAAS,EAAE,CAAS,IAAYC,MAAMA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;IAC/F,gBAAgB,CAAS,IAAYC,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;IAC/E,gBAAgB,CAAS,IAAYC,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;IAC/E,gBAAgB,CAAS,IAAYC,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;IAC/E,gBAAgB,CAAS,IAAYC,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;IAE/E,IAAM,CAAC,GAAG;QACT,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;KAC9F,CAAC;IAQF,AANA;;;;;OAKG;mBACY,KAAiB,EAAE,IAAc;QAC/CC,IAAIA,OAAOA,GAAGA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA;QAC/BA,IAAMA,KAAKA,GAAGA,mBAAYA,CAACA,KAAKA,CAACA,CAACA;QAGlCA,AADAA,sEAAsEA;QACtEA,IAAIA,GAAGA,IAAIA,CAACA,KAAKA,EAAEA,CAACA;QAGpBA,AADAA,gBAAgBA;QAChBA,KAAKA,CAACA,OAAOA,IAAIA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,EAAEA,GAAGA,OAAOA,GAAGA,EAAEA,CAACA,CAACA;QACnDA,KAAKA,CAACA,CAACA,CAACA,OAAOA,GAAGA,EAAEA,IAAIA,CAACA,CAACA,IAAIA,CAACA,CAACA,GAAGA,EAAEA,CAACA,GAAGA,OAAOA,CAACA;QAEjDA,IAAMA,CAACA,GAAGA,IAAIA,KAAKA,CAACA,EAAEA,CAACA,CAACA;QAGxBA,AADAA,gBAAgBA;YACZA,QAAQA,GAAGA,KAAKA,CAACA,MAAMA,CAACA;QAC5BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,EAAEA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;YACvCA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChBA,IAAIA,CAACA,GAAGA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAEhBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC7BA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAAAA,CAACA;oBACXA,CAACA,CAACA,CAACA,CAACA,GAAGA,KAAKA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBACrBA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACLA,CAACA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA;gBAC3EA,CAACA;gBAEDA,IAAMA,EAAEA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC3DA,IAAMA,EAAEA,GAAGA,eAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,EAAEA,GAAGA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBAE7CA,CAACA,GAAGA,CAACA,CAACA;gBACNA,CAACA,GAAGA,CAACA,CAACA;gBACNA,CAACA,GAAGA,CAACA,CAACA;gBACNA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA;gBACpBA,CAACA,GAAGA,CAACA,CAACA;gBACNA,CAACA,GAAGA,CAACA,CAACA;gBACNA,CAACA,GAAGA,CAACA,CAACA;gBACNA,CAACA,GAAGA,eAAQA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,CAACA;YACtBA,CAACA;YAEDA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,CAACA,CAACA,GAAGA,eAAQA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;QAChCA,CAACA;QAEDA,MAAMA,CAACA,mBAAYA,CAACA,IAAIA,CAACA,CAACA;IAC3BA,CAACA;IAED,IAAM,QAAQ,GAAa;QAC1B,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9C,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;KAC9C,CAAC;IACF,IAAM,MAAM,GAAgB,UAAU,IAAgB;QACrD,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC;IAEQ,cAAM,UAFb;IACF,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;IAGvB,IAAM,QAAQ,GAAa;QAC1B,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;QAC9C,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;KAC9C,CAAC;IACF,IAAM,MAAM,GAAgB,UAAU,IAAgB;QACrD,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAEQ,cAAM,UAFd;IACD,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;IACL","sourcesContent":["import { ByteBuffer, utf8 } from 'dojo-core/encoding';\nimport Promise from 'dojo-core/Promise';\nimport { ScriptHash, addWords, bytesToWords, wordsToBytes } from './base';\nimport { Data } from '../../crypto';\n\n// Encoding functions\nfunction S (X: number, n: number): number { return ( X >>> n ) | (X << (32 - n)); }\nfunction R (X: number, n: number): number { return ( X >>> n ); }\nfunction Ch(x: number, y: number, z: number): number  { return ((x & y) ^ ((~x) & z)); }\nfunction Maj(x: number, y: number, z: number): number { return ((x & y) ^ (x & z) ^ (y & z)); }\nfunction Sigma0(x: number): number { return (S(x,  2) ^ S(x, 13) ^ S(x, 22)); }\nfunction Sigma1(x: number): number { return (S(x,  6) ^ S(x, 11) ^ S(x, 25)); }\nfunction Gamma0(x: number): number { return (S(x,  7) ^ S(x, 18) ^ R(x,  3)); }\nfunction Gamma1(x: number): number { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }\n\nconst K = [\n\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n];\n\n/**\n * Calculate a hash based on 32-bit words\n *\n * @param data - The data to hash\n * @param hash - The initial hash value\n */\nfunction sha32(bytes: ByteBuffer, hash: number[]): ByteBuffer {\n\tlet numBits = bytes.length * 8;\n\tconst words = bytesToWords(bytes);\n\n\t// Clone the initial hash since we'll be writing the output into this.\n\thash = hash.slice();\n\n\t// Pad the input\n\twords[numBits >> 5] |= 0x80 << (24 - numBits % 32);\n\twords[((numBits + 64 >> 9) << 4) + 15] = numBits;\n\n\tconst w = new Array(64);\n\n\t// Do the digest\n\tlet numWords = words.length;\n\tfor (let i = 0; i < numWords; i += 16) {\n\t\tlet a = hash[0];\n\t\tlet b = hash[1];\n\t\tlet c = hash[2];\n\t\tlet d = hash[3];\n\t\tlet e = hash[4];\n\t\tlet f = hash[5];\n\t\tlet g = hash[6];\n\t\tlet h = hash[7];\n\n\t\tfor (let j = 0; j < 64; j++) {\n\t\t\tif (j < 16){\n\t\t\t\tw[j] = words[j + i];\n\t\t\t}\n\t\t\telse { \n\t\t\t\tw[j] = addWords(Gamma1(w[j - 2]), w[j - 7], Gamma0(w[j - 15]), w[j - 16]);\n\t\t\t}\n\n\t\t\tconst T1 = addWords(h, Sigma1(e), Ch(e, f, g), K[j], w[j]);\n\t\t\tconst T2 = addWords(Sigma0(a), Maj(a, b, c));\n\n\t\t\th = g;\n\t\t\tg = f;\n\t\t\tf = e;\n\t\t\te = addWords(d, T1);\n\t\t\td = c;\n\t\t\tc = b;\n\t\t\tb = a;\n\t\t\ta = addWords(T1, T2);\n\t\t}\n\n\t\thash[0] = addWords(a, hash[0]);\n\t\thash[1] = addWords(b, hash[1]);\n\t\thash[2] = addWords(c, hash[2]);\n\t\thash[3] = addWords(d, hash[3]);\n\t\thash[4] = addWords(e, hash[4]);\n\t\thash[5] = addWords(f, hash[5]);\n\t\thash[6] = addWords(g, hash[6]);\n\t\thash[7] = addWords(h, hash[7]);\n\t}\n\n\treturn wordsToBytes(hash);\n}\n\nconst HASH_224: number[] = [\n\t0xC1059ED8, 0x367CD507, 0x3070DD17, 0xF70E5939,\n\t0xFFC00B31, 0x68581511, 0x64F98FA7, 0xBEFA4FA4\n];\nconst sha224 = <ScriptHash> function (data: ByteBuffer): ByteBuffer {\n\tconst hash = sha32(data, HASH_224);\n\treturn hash.slice(0, hash.length - 4);\n};\nsha224.blockSize = 512;\nexport { sha224 };\n\nconst HASH_256: number[] = [\n\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19\n];\nconst sha256 = <ScriptHash> function (data: ByteBuffer): ByteBuffer {\n\treturn sha32(data, HASH_256);\n}\nsha256.blockSize = 512;\nexport { sha256 };\n"]}